const{PrismaClient:PrismaClient}=require("@prisma/client"),prisma=new PrismaClient,{enviarEmail:enviarEmail}=require("../servicios/email.servicio"),{generarComprobantePDF:generarComprobantePDF}=require("../servicios/pdf.servicio"),getDiasHabilesAnticipacion=fecha=>{const hoy=new Date;hoy.setHours(0,0,0,0);const fechaSolicitud=new Date(fecha);if(fechaSolicitud.setHours(0,0,0,0),fechaSolicitud<=hoy)return 0;let diasDiferencia=0;const unDia=864e5;let fechaActual=new Date(hoy.getTime()+864e5);for(;fechaActual<=fechaSolicitud;){const diaSemana=fechaActual.getDay();if(0!==diaSemana&&6!==diaSemana&&diasDiferencia++,fechaActual.getTime()===fechaSolicitud.getTime())break;fechaActual=new Date(fechaActual.getTime()+864e5)}return diasDiferencia},crearSolicitud=async(req,res)=>{const{tipo:tipo,fechaInicio:fechaInicio,fechaFin:fechaFin,jornada:jornada,motivo:motivo}=req.body,trabajadorId=req.usuarioId;try{if("ADMINISTRATIVO"===tipo){const diasAnticipacion=getDiasHabilesAnticipacion(fechaInicio);if(diasAnticipacion<1)return res.status(400).json({error:"El permiso administrativo requiere al menos 1 día hábil de anticipación."})}if("ADMINISTRATIVO"===tipo){const usuario=await prisma.usuario.findUnique({where:{id:trabajadorId},select:{diasAdminDisponibles:!0}}),diasSolicitados="COMPLETO"===jornada?1:.5;if(usuario.diasAdminDisponibles<diasSolicitados)return res.status(400).json({error:`No tienes suficientes días disponibles. Solicitas ${diasSolicitados} y te quedan ${usuario.diasAdminDisponibles}.`})}const nuevaSolicitud=await prisma.solicitud.create({data:{tipo:tipo,fechaInicio:new Date(fechaInicio),fechaFin:new Date(fechaFin),jornada:jornada,motivo:motivo,estado:"PENDIENTE",trabajador:{connect:{id:trabajadorId}}}});res.status(201).json(nuevaSolicitud)}catch(error){console.error("Error al crear solicitud:",error),res.status(500).json({error:"Error interno del servidor."})}},getMisSolicitudes=async(req,res)=>{const trabajadorId=req.usuarioId;try{const solicitudes=await prisma.solicitud.findMany({where:{trabajadorId:trabajadorId},orderBy:{fechaInicio:"desc"}});res.json(solicitudes)}catch(error){console.error("Error al obtener mis solicitudes:",error),res.status(500).json({error:"Error interno del servidor."})}},getSolicitudesPorArea=async(req,res)=>{const usuarioId=req.usuarioId;try{const usuario=await prisma.usuario.findUnique({where:{id:usuarioId},select:{areaId:!0,rol:!0}});if(!usuario)return res.status(404).json({error:"Usuario no encontrado."});let filtroWhere={trabajador:{areaId:usuario.areaId}};"ADMIN"===usuario.rol&&(filtroWhere={});const solicitudes=await prisma.solicitud.findMany({where:filtroWhere,include:{trabajador:{select:{nombreCompleto:!0,area:{select:{nombre:!0}}}}},orderBy:{fechaInicio:"asc"}});res.json(solicitudes)}catch(error){console.error("Error al obtener solicitudes de área:",error),res.status(500).json({error:"Error interno del servidor."})}},actualizarEstadoSolicitud=async(req,res)=>{const{id:id}=req.params,{estado:estado}=req.body,aprobadorId=req.usuarioId;if(!["APROBADO","RECHAZADO"].includes(estado))return res.status(400).json({error:"Estado no válido."});try{const solicitud=await prisma.solicitud.findUnique({where:{id:parseInt(id)},include:{trabajador:{include:{area:!0}}}});if(!solicitud)return res.status(404).json({error:"Solicitud no encontrada."});let solicitudActualizada;if("ADMINISTRATIVO"===solicitud.tipo&&"APROBADO"===estado){const diasDescontar="COMPLETO"===solicitud.jornada?1:.5;if(solicitud.trabajador.diasAdminDisponibles<diasDescontar)return res.status(400).json({error:"El trabajador ya no tiene días suficientes."});const transaccionResultados=await prisma.$transaction([prisma.usuario.update({where:{id:solicitud.trabajadorId},data:{diasAdminDisponibles:{decrement:diasDescontar}}}),prisma.solicitud.update({where:{id:parseInt(id)},data:{estado:estado,aprobadorId:aprobadorId}})]);solicitudActualizada=transaccionResultados[1]}else solicitudActualizada=await prisma.solicitud.update({where:{id:parseInt(id)},data:{estado:estado,aprobadorId:aprobadorId}});if("APROBADO"===estado){const areaIdDelTrabajador=solicitud.trabajador.areaId,coordinador=await prisma.usuario.findFirst({where:{areaId:areaIdDelTrabajador,rol:"COORDINADOR"}});if(coordinador&&coordinador.email){const tipoPermiso="ADMINISTRATIVO"===solicitud.tipo?"Permiso Administrativo":"Teletrabajo",fechaInicioFmt=new Date(solicitud.fechaInicio).toLocaleDateString("es-CL",{timeZone:"UTC"});let detallesFecha=`Fecha: ${fechaInicioFmt} (Jornada: ${solicitud.jornada})`;if("TELETRABAJO"===solicitud.tipo&&solicitud.fechaFin){const fechaFinFmt=new Date(solicitud.fechaFin).toLocaleDateString("es-CL",{timeZone:"UTC"});fechaInicioFmt!==fechaFinFmt&&(detallesFecha=`Del ${fechaInicioFmt} al ${fechaFinFmt}`)}const asunto=`Solicitud Aprobada: ${tipoPermiso} - ${solicitud.trabajador.nombreCompleto}`,textoPlano=`\n          Hola ${coordinador.nombreCompleto},\n\n          Se ha aprobado una solicitud de permiso para un miembro de tu área.\n\n          Detalles de la Solicitud:\n          - Trabajador: ${solicitud.trabajador.nombreCompleto}\n          - Área: ${solicitud.trabajador.area.nombre}\n          - Tipo: ${tipoPermiso}\n          ${solicitud.motivo?`- Motivo: ${solicitud.motivo}`:""}\n          - ${detallesFecha}\n\n          Este es un correo informativo generado automáticamente.\n        `,textoHtml=`\n          <div style="font-family: Arial, sans-serif; line-height: 1.6;">\n            <h3>Solicitud de Permiso Aprobada</h3>\n            <p>Hola ${coordinador.nombreCompleto},</p>\n            <p>Se ha aprobado una solicitud de permiso para un miembro de tu área.</p>\n            <hr>\n            <h4>Detalles de la Solicitud:</h4>\n            <ul style="list-style-type: none; padding-left: 0;">\n              <li><strong>Trabajador:</strong> ${solicitud.trabajador.nombreCompleto}</li>\n              <li><strong>Área:</strong> ${solicitud.trabajador.area.nombre}</li>\n              <li><strong>Tipo de Permiso:</strong> ${tipoPermiso}</li>\n              ${solicitud.motivo?`<li><strong>Motivo:</strong> ${solicitud.motivo}</li>`:""}\n              <li><strong>Detalle:</strong> ${detallesFecha}</li>\n            </ul>\n            <p><em>Este es un correo informativo generado automáticamente.</em></p>\n          </div>\n        `;enviarEmail({to:coordinador.email,subject:asunto,text:textoPlano,html:textoHtml}).catch(err=>{console.error("Fallo al enviar email de notificación:",err)})}else console.log(`No se encontró coordinador para el área ID: ${areaIdDelTrabajador} para notificar.`)}res.json(solicitudActualizada)}catch(error){console.error("Error al actualizar estado:",error),res.status(500).json({error:"Error interno del servidor."})}},descargarComprobante=async(req,res)=>{const{id:id}=req.params;try{const solicitud=await prisma.solicitud.findUnique({where:{id:parseInt(id)},include:{trabajador:{include:{area:!0}},aprobador:!0}});if(!solicitud)return res.status(404).json({error:"Solicitud no encontrada."});if("APROBADO"!==solicitud.estado)return res.status(400).json({error:"Solo se pueden descargar comprobantes de solicitudes APROBADAS."});if(!solicitud.aprobador)return res.status(400).json({error:"No se encontraron datos del aprobador."});const pdfBuffer=await generarComprobantePDF(solicitud),nombreArchivo=`Comprobante-Permiso-${solicitud.id}-${solicitud.trabajador.nombreCompleto.split(" ")[0]}.pdf`;res.setHeader("Content-Disposition",`attachment; filename="${nombreArchivo}"`),res.setHeader("Content-Type","application/pdf"),res.send(pdfBuffer)}catch(error){console.error("Error al generar PDF:",error),res.status(500).json({error:"Error interno al generar el PDF."})}};module.exports={crearSolicitud:crearSolicitud,getMisSolicitudes:getMisSolicitudes,getSolicitudesPorArea:getSolicitudesPorArea,actualizarEstadoSolicitud:actualizarEstadoSolicitud,descargarComprobante:descargarComprobante};
const{PrismaClient:PrismaClient}=require("@prisma/client"),bcrypt=require("bcryptjs"),jwt=require("jsonwebtoken"),prisma=new PrismaClient,login=async(req,res)=>{const{email:email,password:password}=req.body;if(!email||!password)return res.status(400).json({error:"Email y contraseña son requeridos."});try{const usuario=await prisma.usuario.findUnique({where:{email:email.toLowerCase()},include:{area:!0}});if(!usuario)return res.status(401).json({error:"Credenciales inválidas."});const esPasswordValido=await bcrypt.compare(password,usuario.password);if(!esPasswordValido)return res.status(401).json({error:"Credenciales inválidas."});const payload={id:usuario.id,email:usuario.email,rol:usuario.rol,nombre:usuario.nombreCompleto,area:usuario.area.nombre},token=jwt.sign(payload,process.env.JWT_SECRET,{expiresIn:"8h"});res.json({token:token,usuario:payload})}catch(error){console.error("Error en el login:",error),res.status(500).json({error:"Error interno del servidor."})}},getPerfil=async(req,res)=>{try{const usuario=await prisma.usuario.findUnique({where:{id:req.usuarioId},select:{id:!0,email:!0,nombreCompleto:!0,rol:!0,diasAdminDisponibles:!0,area:{select:{nombre:!0}}}});if(!usuario)return res.status(404).json({error:"Usuario no encontrado."});res.json({id:usuario.id,email:usuario.email,nombre:usuario.nombreCompleto,rol:usuario.rol,diasDisponibles:usuario.diasAdminDisponibles,area:usuario.area.nombre})}catch(error){console.error("Error al obtener perfil:",error),res.status(500).json({error:"Error interno del servidor."})}};module.exports={login:login,getPerfil:getPerfil};